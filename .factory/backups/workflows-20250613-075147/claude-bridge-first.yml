name: Claude Bridge First (No API Key)

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task:
        description: 'Task for Claude'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-bridge:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Parse Task
        id: task
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TASK="${{ inputs.task }}"
          else
            COMMENT="${{ github.event.comment.body }}"
            TASK=$(echo "$COMMENT" | sed 's/.*@claude //' | head -1)
          fi
          
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "üéØ Task: $TASK"
          
      - name: Try Local Claude Bridge FIRST
        id: claude_bridge
        run: |
          echo "üåê Connecting to Local Claude Bridge..."
          
          # Your ngrok URL here
          BRIDGE_URL="https://45c0-85-159-229-107.ngrok-free.app"
          TASK="${{ steps.task.outputs.task }}"
          
          # Check if bridge is alive
          echo "Checking bridge health..."
          if curl -f "$BRIDGE_URL/health" 2>&1 | jq '.claude_code_available'; then
            echo "‚úÖ Claude Bridge is ONLINE!"
            
            # Send request to Claude via bridge
            echo "Sending request to Claude..."
            RESPONSE=$(curl -s -X POST "$BRIDGE_URL/v1/chat/completions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer local-max" \
              -d "{
                \"model\": \"gpt-4\",
                \"messages\": [
                  {
                    \"role\": \"user\",
                    \"content\": \"$TASK\"
                  }
                ],
                \"max_tokens\": 1000,
                \"temperature\": 0.7
              }" 2>&1)
            
            echo "Raw response: $RESPONSE"
            
            # Extract Claude's response
            CLAUDE_RESPONSE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // .error.message // empty' 2>/dev/null)
            
            if [ ! -z "$CLAUDE_RESPONSE" ]; then
              echo "‚úÖ Got response from Claude!"
              STATUS="success"
            else
              echo "‚ö†Ô∏è No valid response from Claude"
              CLAUDE_RESPONSE="Claude –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä."
              STATUS="partial"
            fi
          else
            echo "‚ùå Claude Bridge is OFFLINE!"
            CLAUDE_RESPONSE="–õ–æ–∫–∞–ª—å–Ω—ã–π –º–æ—Å—Ç —Å Claude –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n1. Cynosure Bridge –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ\n2. Ngrok —Ç—É–Ω–Ω–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω\n3. URL –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π: $BRIDGE_URL"
            STATUS="error"
          fi
          
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$CLAUDE_RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          
      - name: Post Claude Response
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const response = `${{ steps.claude_bridge.outputs.response }}`;
            const status = `${{ steps.claude_bridge.outputs.status }}`;
            const task = `${{ steps.task.outputs.task }}`;
            
            let statusEmoji = '‚úÖ';
            if (status === 'error') statusEmoji = '‚ùå';
            else if (status === 'partial') statusEmoji = '‚ö†Ô∏è';
            
            const comment = `${statusEmoji} **Claude via Local Bridge**

**Task:** ${task}

**Response:**
${response}

---
*üåê Using Local Cynosure Bridge*  
*üß† Powered by Claude MAX subscription*  
*üîì No API key required*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
      - name: Summary
        run: |
          echo "## Claude Bridge Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.claude_bridge.outputs.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Task:** ${{ steps.task.outputs.task }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Claude Response:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.claude_bridge.outputs.response }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Bridge URL:** https://45c0-85-159-229-107.ngrok-free.app" >> $GITHUB_STEP_SUMMARY