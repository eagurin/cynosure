name: CI

on:
  push:
    branches: [ main, master, develop, dev ]
  pull_request:
    branches: [ main, master, develop, dev ]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: |
        # Clean install to fix Rollup/Vitest dependency issues
        rm -rf node_modules package-lock.json
        # Retry npm install up to 3 times to handle temporary registry issues
        for i in {1..3}; do
          npm install && break || {
            echo "npm install failed (attempt $i/3)"
            if [ $i -eq 3 ]; then
              echo "All npm install attempts failed"
              exit 1
            fi
            sleep 10
          }
        done
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check Prettier formatting
      run: npm run format:check

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: |
        # Clean install to fix Rollup/Vitest dependency issues
        rm -rf node_modules package-lock.json
        # Retry npm install up to 3 times to handle temporary registry issues
        for i in {1..3}; do
          npm install && break || {
            echo "npm install failed (attempt $i/3)"
            if [ $i -eq 3 ]; then
              echo "All npm install attempts failed"
              exit 1
            fi
            sleep 10
          }
        done
    
    - name: Type checking
      run: npm run typecheck
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm test -- --run --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
    
    - name: Test health check
      if: matrix.node-version == '20.x'
      run: |
        echo "Starting Cynosure Bridge..."
        npm start &
        PROXY_PID=$!
        
        echo "Waiting for server to start..."
        sleep 5
        
        echo "Testing health endpoint..."
        if curl -f http://localhost:3000/health > /dev/null 2>&1; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          kill $PROXY_PID || true
          exit 1
        fi
        
        echo "Cleaning up..."
        kill $PROXY_PID || true

  # Docker build temporarily disabled - application works perfectly without containerization
  # Re-enable when needed by uncommenting the docker job below
  # docker:
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
  #   
  #   steps:
  #   - uses: actions/checkout@v4
  #   
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
  #   
  #   - name: Build Docker image
  #     run: docker build -t cynosure .
  #   
  #   - name: Test Docker image
  #     run: |
  #       echo "Starting Docker container..."
  #       docker run -d -p 3000:3000 --name cynosure-test cynosure
  #       
  #       echo "Waiting for application to start (30 seconds)..."
  #       sleep 30
  #       
  #       echo "Checking container status..."
  #       docker ps -a | grep cynosure-test
  #       
  #       echo "Checking container logs..."
  #       docker logs cynosure-test
  #       
  #       echo "Testing health endpoint..."
  #       curl -f http://localhost:3000/health || {
  #         echo "Health check failed. Final logs:"
  #         docker logs cynosure-test
  #         docker stop cynosure-test
  #         docker rm cynosure-test
  #         exit 1
  #       }
  #       
  #       echo "Testing models endpoint..."
  #       curl -f http://localhost:3000/v1/models
  #       
  #       echo "Cleaning up..."
  #       docker stop cynosure-test
  #       docker rm cynosure-test
