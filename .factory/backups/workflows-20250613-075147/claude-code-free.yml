name: Claude Code Free (GitHub Models)

on:
  workflow_dispatch:
    inputs:
      task:
        description: '–ó–∞–¥–∞—á–∞ –¥–ª—è AI –ø–æ–º–æ—â–Ω–∏–∫–∞'
        required: true
        type: string
      target_branch:
        description: '–¶–µ–ª–µ–≤–∞—è –≤–µ—Ç–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π'
        required: false
        default: 'ai-assist'
        type: string

  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å GitHub Models
  free-ai-assistant:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/ai'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Parse Task
      id: parse-task
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "task=${{ inputs.task }}" >> $GITHUB_OUTPUT
          echo "branch=${{ inputs.target_branch }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
        else
          COMMENT="${{ github.event.comment.body }}"
          TASK=$(echo "$COMMENT" | sed 's/\/ai //')
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "branch=ai-fix-${{ github.run_id }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Branch
      run: |
        git checkout -b ${{ steps.parse-task.outputs.branch }}
        git config --global user.name "Free AI Assistant"
        git config --global user.email "ai-assistant@cynosure.dev"
        
    - name: Setup GitHub CLI with Models Extension
      run: |
        gh extension install github/gh-models || echo "Extension already installed"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Create AI Prompt
      run: |
        cat > ai_prompt.txt << 'EOF'
        –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º Cynosure Bridge - OpenAI API-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Claude.
        
        –ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:
        - TypeScript/Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Fastify —Å–µ—Ä–≤–µ—Ä–æ–º
        - –ü–µ—Ä–µ–≤–æ–¥–∏—Ç OpenAI API –∑–∞–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç Claude
        - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –∏ –º–∞–ø–ø–∏–Ω–≥ –º–æ–¥–µ–ª–µ–π
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ ES –º–æ–¥—É–ª–∏ —Å–æ —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π
        
        –ó–ê–î–ê–ß–ê: ${{ steps.parse-task.outputs.task }}
        
        –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
        1. –°–ª–µ–¥—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º TypeScript –∫–æ–Ω–≤–µ–Ω—Ü–∏—è–º
        2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        3. –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
        4. –î–æ–±–∞–≤–ª—è–π JSDoc –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        5. –í–∫–ª—é—á–∞–π —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—à—å –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        6. –ó–∞–ø—É—Å–∫–∞–π –ª–∏–Ω—Ç–∏–Ω–≥ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–¥–æ–≤—É—é –±–∞–∑—É –∏ —Ä–µ–∞–ª–∏–∑—É–π –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –∫–æ–¥—É.
        EOF
        
    - name: Execute Free AI Analysis
      id: ai-analysis
      run: |
        echo "ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑..."
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
        AI_RESPONSE=$(
          gh models run openai/gpt-4o-mini "$(cat ai_prompt.txt)" 2>/dev/null || \
          gh models run meta/llama-3.1-8b-instruct "$(cat ai_prompt.txt)" 2>/dev/null || \
          gh models run mistral-ai/mistral-small "$(cat ai_prompt.txt)" 2>/dev/null || \
          echo "AI –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –°–æ–∑–¥–∞—é –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á–∏: ${{ steps.parse-task.outputs.task }}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
        echo "$AI_RESPONSE" > ai_analysis.md
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–∞ –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if [[ "$AI_RESPONSE" == *"–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"* ]]; then
          echo "## üîß Fallback –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞" >> ai_analysis.md
          echo "" >> ai_analysis.md
          echo "AI –º–æ–¥–µ–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –≤–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:" >> ai_analysis.md
          echo "" >> ai_analysis.md
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript
          if npm run typecheck 2>&1 | grep -q "error"; then
            echo "‚ùå **TypeScript –æ—à–∏–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã** - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–ø—ã" >> ai_analysis.md
          else
            echo "‚úÖ **TypeScript –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ**" >> ai_analysis.md
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º ESLint
          if npm run lint 2>&1 | grep -q "error"; then
            echo "‚ùå **ESLint –æ—à–∏–±–∫–∏ –Ω–∞–π–¥–µ–Ω—ã** - –∑–∞–ø—É—Å—Ç–∏ \`npm run lint:fix\`" >> ai_analysis.md
          else
            echo "‚úÖ **–ö–æ–¥ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç style guide**" >> ai_analysis.md
          fi
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç—ã
          if npm test 2>&1 | grep -q "failed"; then
            echo "‚ùå **–¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç** - –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å" >> ai_analysis.md
          else
            echo "‚úÖ **–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —É—Å–ø–µ—à–Ω–æ**" >> ai_analysis.md
          fi
          
          echo "" >> ai_analysis.md
          echo "### üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞—á–∏: ${{ steps.parse-task.outputs.task }}" >> ai_analysis.md
          echo "1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ–∞–π–ª—ã –≤ \`src/\` –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏" >> ai_analysis.md
          echo "2. –°–ª–µ–¥—É–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∫–æ–¥–∞" >> ai_analysis.md
          echo "3. –î–æ–±–∞–≤—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã –≤ \`tests/\`" >> ai_analysis.md
          echo "4. –û–±–Ω–æ–≤–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ" >> ai_analysis.md
        fi
        
        echo "ai_available=true" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Apply Basic Code Improvements
      run: |
        echo "üîß –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è..."
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        npm run lint:fix || echo "Linting completed with issues"
        npm run format || echo "Formatting completed"
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º
        mkdir -p docs/ai-analysis
        cp ai_analysis.md "docs/ai-analysis/analysis-${{ github.run_id }}.md"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –ª–∏–Ω—Ç–µ—Ä–∞
        if ! git diff --quiet; then
          git add -A
          echo "changes_made=true" >> $GITHUB_ENV
        else
          echo "changes_made=false" >> $GITHUB_ENV
        fi
        
    - name: Create Template Files for Task
      if: env.changes_made == 'false'
      run: |
        echo "üìù –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞—á–∏..."
        
        TASK_NAME=$(echo "${{ steps.parse-task.outputs.task }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        mkdir -p "src/features/$TASK_NAME"
        
        cat > "src/features/$TASK_NAME/README.md" << EOF
        # ${{ steps.parse-task.outputs.task }}
        
        ## –û–ø–∏—Å–∞–Ω–∏–µ
        –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è: ${{ steps.parse-task.outputs.task }}
        
        ## TODO
        - [ ] –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
        - [ ] –î–æ–±–∞–≤–∏—Ç—å TypeScript —Ç–∏–ø—ã
        - [ ] –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã
        - [ ] –î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        - [ ] –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º API
        
        ## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤
        - \`index.ts\` - –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        - \`types.ts\` - TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        - \`__tests__/\` - —Ç–µ—Å—Ç—ã
        EOF
        
        cat > "src/features/$TASK_NAME/index.ts" << EOF
        /**
         * Feature: ${{ steps.parse-task.outputs.task }}
         * Created by Free AI Assistant
         */
        
        export interface ${TASK_NAME^}Config {
          // TODO: –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        }
        
        export class ${TASK_NAME^}Feature {
          constructor(private config: ${TASK_NAME^}Config) {}
          
          /**
           * TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
           */
          async execute(): Promise<void> {
            throw new Error('Not implemented yet');
          }
        }
        EOF
        
        # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Ç–µ—Å—Ç–∞
        mkdir -p "tests/features/$TASK_NAME"
        cat > "tests/features/$TASK_NAME/$TASK_NAME.test.ts" << EOF
        import { describe, it, expect } from 'vitest';
        import { ${TASK_NAME^}Feature } from '../../../src/features/$TASK_NAME';
        
        describe('${TASK_NAME^}Feature', () => {
          it('should be implemented', () => {
            // TODO: –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã –¥–ª—è ${{ steps.parse-task.outputs.task }}
            expect(true).toBe(true);
          });
        });
        EOF
        
        git add -A
        echo "changes_made=true" >> $GITHUB_ENV
        
    - name: Run Quality Checks
      run: |
        echo "‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript
        npm run typecheck || echo "TypeScript issues found"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        npm test || echo "Tests failed but continuing..."
        
    - name: Commit Changes
      if: env.changes_made == 'true'
      run: |
        git add -A
        
        git commit -m "feat: ${{ steps.parse-task.outputs.task }}

–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ AI –ø–æ–º–æ—â–Ω–∏–∫–∞ (GitHub Models).

–ò–∑–º–µ–Ω–µ–Ω–∏—è:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ (lint, format)
- –®–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- AI –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

Co-Authored-By: Free AI Assistant <ai-assistant@cynosure.dev>
Co-Authored-By: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
        
    - name: Push and Create PR
      if: env.changes_made == 'true'
      run: |
        git push origin ${{ steps.parse-task.outputs.branch }}
        
        gh pr create \
          --title "ü§ñ Free AI: ${{ steps.parse-task.outputs.task }}" \
          --body "## ü§ñ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –ü–æ–º–æ—â–Ω–∏–∫

### –ó–∞–¥–∞—á–∞
${{ steps.parse-task.outputs.task }}

### –ß—Ç–æ —Å–¥–µ–ª–∞–Ω–æ
- ‚úÖ AI –∞–Ω–∞–ª–∏–∑ —Å GitHub Models (–±–µ—Å–ø–ª–∞—Ç–Ω–æ!)
- ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞
- ‚úÖ –®–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞

### AI –ê–Ω–∞–ª–∏–∑
–ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Ñ–∞–π–ª–µ: \`docs/ai-analysis/analysis-${{ github.run_id }}.md\`

### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
2. –†–µ–∞–ª–∏–∑—É–π –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
3. –î–æ–±–∞–≤—å —Ç–µ—Å—Ç—ã
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è

---
*üÜì –°–æ–∑–¥–∞–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º AI –ø–æ–º–æ—â–Ω–∏–∫–æ–º –Ω–∞ GitHub Models*
*üë§ –ó–∞–ø—Ä–æ—Å–∏–ª: @${{ github.actor }}*" \
          --base dev \
          --head ${{ steps.parse-task.outputs.branch }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment Result
      if: github.event_name == 'issue_comment'
      uses: actions/github-script@v7
      with:
        script: |
          const changesMade = process.env.changes_made === 'true';
          const task = '${{ steps.parse-task.outputs.task }}';
          const branch = '${{ steps.parse-task.outputs.branch }}';
          
          let message;
          if (changesMade) {
            message = `ü§ñ **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI –ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É!**
            
**–ó–∞–¥–∞—á–∞:** ${task}
**–í–µ—Ç–∫–∞:** \`${branch}\`

‚úÖ –°–æ–∑–¥–∞–Ω Pull Request —Å:
- üÜì AI –∞–Ω–∞–ª–∏–∑–æ–º (GitHub Models)
- üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
- üìù –®–∞–±–ª–æ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
- ‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

*üÜì –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ - –Ω–∏–∫–∞–∫–∏—Ö API –∫–ª—é—á–µ–π!*`;
          } else {
            message = `‚ÑπÔ∏è **AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω**
            
**–ó–∞–¥–∞—á–∞:** ${task}

–ö–æ–¥ —É–∂–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∞–Ω–∞–ª–∏–∑–µ.

*ü§ñ Powered by FREE GitHub Models*`;
          }
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: message
          });

  # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ GitHub Models –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
  simple-fallback:
    if: failure() && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [free-ai-assistant]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Simple Code Analysis
      run: |
        echo "üîÑ AI –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑"
        
        mkdir -p docs/analysis
        cat > docs/analysis/simple-analysis.md << EOF
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞

        ## –ó–∞–¥–∞—á–∞: ${{ github.event.inputs.task }}

        ## –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞
        - –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $(git log -1 --pretty=format:"%h %s")
        - –§–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ: $(find src -name "*.ts" | wc -l)
        - –¢–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: $(find tests -name "*.test.ts" | wc -l)

        ## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ \`src/\`
        2. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã –≤ \`tests/\`
        3. –°–ª–µ–¥—É–π TypeScript –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∞
        4. –î–æ–±–∞–≤—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–µ—Å—Ç—ã

        ## –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        \`\`\`bash
        npm run typecheck  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
        npm run lint       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
        npm test          # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        npm run dev       # –ó–∞–ø—É—Å–∫ dev —Å–µ—Ä–≤–µ—Ä–∞
        \`\`\`
        EOF
        
        echo "‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –≤ docs/analysis/simple-analysis.md"