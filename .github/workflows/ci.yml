name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop, dev ]
  pull_request:
    branches: [ main, master, develop, dev ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
    
    - name: Install dependencies
      run: |
        # Clean install to fix Rollup/Vitest dependency issues
        rm -rf node_modules package-lock.json
        # Retry npm install up to 3 times to handle temporary registry issues
        for i in {1..3}; do
          npm install && break || {
            echo "npm install failed (attempt $i/3)"
            if [ $i -eq 3 ]; then
              echo "All npm install attempts failed"
              exit 1
            fi
            sleep 10
          }
        done
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check Prettier formatting
      run: npm run format:check

  test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: |
        # Clean install to fix Rollup/Vitest dependency issues
        rm -rf node_modules package-lock.json
        # Retry npm install up to 3 times to handle temporary registry issues
        for i in {1..3}; do
          npm install && break || {
            echo "npm install failed (attempt $i/3)"
            if [ $i -eq 3 ]; then
              echo "All npm install attempts failed"
              exit 1
            fi
            sleep 10
          }
        done
    
    - name: Type checking
      run: npm run typecheck
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm test -- --run --coverage
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: matrix.node-version == '20.x'
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false
    
    - name: Test health check
      if: matrix.node-version == '20.x'
      run: |
        echo "Starting Cynosure Bridge..."
        npm start &
        PROXY_PID=$!
        
        echo "Waiting for server to start..."
        sleep 5
        
        echo "Testing health endpoint..."
        if curl -f http://localhost:3000/health > /dev/null 2>&1; then
          echo "✅ Health check passed"
        else
          echo "❌ Health check failed"
          kill $PROXY_PID || true
          exit 1
        fi
        
        echo "Cleaning up..."
        kill $PROXY_PID || true

  # Security Audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm run security:audit
        continue-on-error: true
        
      - name: Run dependency check
        run: npm run deps:audit

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          push: false
          tags: cynosure:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Test Docker image
        run: |
          docker run --rm -d --name cynosure-test -p 3001:3000 cynosure:test
          sleep 30
          curl -f http://localhost:3001/health || exit 1
          docker stop cynosure-test

  # Build and Push Docker Image
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build project
        run: npm run build
        
      - name: Start server
        run: |
          npm run start &
          sleep 10
          
      - name: Run basic performance tests
        run: |
          # Test health endpoint performance
          for i in {1..10}; do
            curl -f http://localhost:3000/health > /dev/null 2>&1 || exit 1
            echo "Health check $i/10 passed"
          done
          
          # Test API endpoints
          curl -f -X POST http://localhost:3000/v1/chat/completions \
            -H "Authorization: Bearer test-key" \
            -H "Content-Type: application/json" \
            -d '{"model":"gpt-4","messages":[{"role":"user","content":"test"}]}' \
            > /dev/null 2>&1 || echo "Chat completion test completed"
