name: Claude Code Official (via Cynosure Bridge)

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      task:
        description: '–ó–∞–¥–∞—á–∞ –¥–ª—è Claude'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write

jobs:
  # –ó–∞–ø—É—Å–∫ Cynosure Bridge –∫–∞–∫ –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
  start-proxy:
    runs-on: ubuntu-latest
    outputs:
      proxy-url: ${{ steps.proxy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build Project
        run: npm run build
        
      - name: Start Cynosure Bridge
        id: proxy
        run: |
          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Cynosure Bridge –Ω–∞ –ø–æ—Ä—Ç—É 3000..."
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
          PORT=3000 npm start &
          PROXY_PID=$!
          
          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
          sleep 10
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "‚úÖ Cynosure Bridge –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            echo "url=http://localhost:3000" >> $GITHUB_OUTPUT
            echo "pid=$PROXY_PID" >> $GITHUB_OUTPUT
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cynosure Bridge"
            exit 1
          fi
          
          # –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
          echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å..."
          curl -X POST http://localhost:3000/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer dummy-key" \
            -d '{
              "model": "gpt-4",
              "messages": [{"role": "user", "content": "Test connection"}],
              "max_tokens": 10
            }' || echo "–¢–µ—Å—Ç API –∑–∞–≤–µ—Ä—à–µ–Ω"
        
        env:
          NODE_ENV: production

  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π Claude Code Action —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
  claude-response:
    needs: start-proxy
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'issues' && github.event.action == 'opened') ||
      (github.event_name == 'pull_request_review' && github.event.review.state == 'commented')
    
    steps:
      - name: Generate GitHub App Token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.CLAUDE_GITHUB_APP_ID }}
          private-key: ${{ secrets.CLAUDE_GITHUB_APP_PRIVATE_KEY }}
          
      - name: Setup Custom OpenAI Endpoint
        run: |
          echo "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π OpenAI endpoint —á–µ—Ä–µ–∑ Cynosure Bridge"
          echo "OPENAI_API_BASE=${{ needs.start-proxy.outputs.proxy-url }}" >> $GITHUB_ENV
          echo "OPENAI_BASE_URL=${{ needs.start-proxy.outputs.proxy-url }}" >> $GITHUB_ENV
          
      - name: Claude Code Action (Official)
        uses: anthropics/claude-code-action@beta
        with:
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º dummy key —Ç–∞–∫ –∫–∞–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ Claude MAX
          anthropic_api_key: "dummy-key-for-max-subscription"
          github_token: ${{ steps.app-token.outputs.token }}
          
          # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
          trigger_phrase: "@claude"
          max_turns: "5"
          timeout_minutes: 30
          
          # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
          custom_instructions: |
            –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —á–µ—Ä–µ–∑ Cynosure Bridge - OpenAI API-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è Claude MAX.
            
            –í–ê–ñ–ù–û: 
            - –ò—Å–ø–æ–ª—å–∑—É–µ—à—å Claude MAX –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–∫—Å–∏
            - API endpoint: ${{ needs.start-proxy.outputs.proxy-url }}
            - –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –Ω–∞—à Cynosure Bridge
            - –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            
            –ü—Ä–æ–µ–∫—Ç: TypeScript/Node.js –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Fastify —Å–µ—Ä–≤–µ—Ä–æ–º
            –¶–µ–ª—å: –û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å OpenAI API –¥–ª—è Claude
          
          # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã  
          allowed_tools: |
            Edit,
            Replace,
            Bash(npm install),
            Bash(npm run test),
            Bash(npm run lint),
            Bash(npm run build),
            Bash(npm run typecheck)
            
          # –ö–∞—Å—Ç–æ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
          claude_env: |
            NODE_ENV: development
            CYNOSURE_PROXY_URL: ${{ needs.start-proxy.outputs.proxy-url }}
            OPENAI_API_BASE: ${{ needs.start-proxy.outputs.proxy-url }}
            
          # –ü—Ä—è–º–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è workflow_dispatch
          direct_prompt: ${{ github.event.inputs.task || '' }}

  # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  cleanup:
    needs: [start-proxy, claude-response]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup Proxy
        run: |
          echo "üßπ –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã..."
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã node
          pkill -f "npm start" || echo "–ü—Ä–æ—Ü–µ—Å—Å—ã —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
          echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"