name: Claude Code Working

on:
  workflow_dispatch:
    inputs:
      task:
        description: 'Task for Claude Code'
        required: true
        type: string
      target_branch:
        description: 'Branch to create'
        required: false
        default: 'claude-fix'
        type: string

  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-task:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '/claude'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Parse Task
      id: parse-task
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "task=${{ inputs.task }}" >> $GITHUB_OUTPUT
          echo "branch=${{ inputs.target_branch }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
        else
          COMMENT="${{ github.event.comment.body }}"
          TASK=$(echo "$COMMENT" | sed 's/\/claude //')
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "branch=claude-comment-fix-${{ github.run_id }}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Branch
      run: |
        git checkout -b ${{ steps.parse-task.outputs.branch }}
        git config --global user.name "Claude Bot"
        git config --global user.email "claude-bot@cynosure.dev"
        
    - name: Execute Claude Task
      id: claude-execute
      uses: grll/claude-code-base-action@v1
      with:
        prompt: |
          You are working on the Cynosure Bridge project - an OpenAI API-compatible proxy for Claude.
          
          **Project Context:**
          - TypeScript/Node.js application using Fastify
          - Translates OpenAI API requests to Claude format
          - Supports streaming responses and model mappings
          - Uses modern ES modules with strict typing
          
          **Task:** ${{ steps.parse-task.outputs.task }}
          
          **Requirements:**
          1. Follow existing TypeScript conventions
          2. Maintain OpenAI API compatibility
          3. Use proper error handling
          4. Add JSDoc comments for complex functions
          5. Include tests if adding new functionality
          6. Run linting and formatting
          
          **Available Tools:** read, write, edit, bash, search
          
          Please analyze the codebase and implement the requested changes.
        anthropic_access_token: ${{ secrets.ANTHROPIC_ACCESS_TOKEN }}
        anthropic_refresh_token: ${{ secrets.ANTHROPIC_REFRESH_TOKEN }}
        anthropic_expires_at: ${{ secrets.ANTHROPIC_EXPIRES_AT }}
        allowed_tools: "read,write,edit,bash,search"
        
    - name: Run Quality Checks
      run: |
        # Run tests
        npm test || echo "Tests failed but continuing..."
        
        # Fix linting issues
        npm run lint:fix || echo "Linting completed with issues"
        
        # Format code
        npm run format || echo "Formatting completed"
        
    - name: Commit Changes
      run: |
        git add -A
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
          echo "has_changes=false" >> $GITHUB_ENV
        else
          git commit -m "feat: ${{ steps.parse-task.outputs.task }}

Implemented by Claude Code based on user request.

Co-Authored-By: Claude Bot <claude-bot@cynosure.dev>
Co-Authored-By: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          
          echo "has_changes=true" >> $GITHUB_ENV
        fi
        
    - name: Push and Create PR
      if: env.has_changes == 'true'
      run: |
        git push origin ${{ steps.parse-task.outputs.branch }}
        
        gh pr create \
          --title "🤖 Claude: ${{ steps.parse-task.outputs.task }}" \
          --body "## Claude Code Implementation

### Task
${{ steps.parse-task.outputs.task }}

### Implementation
This PR contains changes implemented by Claude Code based on the user request.

### Checklist
- [ ] Code follows project TypeScript conventions
- [ ] OpenAI API compatibility maintained
- [ ] Tests are passing
- [ ] Linting and formatting applied

### Review Notes
Please review the changes carefully before merging to ensure they meet project standards.

---
*🤖 Generated by Claude Code*
*Requested by: @${{ github.actor }}*" \
          --base dev \
          --head ${{ steps.parse-task.outputs.branch }}
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Comment Result
      if: github.event_name == 'issue_comment'
      uses: actions/github-script@v7
      with:
        script: |
          const hasChanges = process.env.has_changes === 'true';
          const task = '${{ steps.parse-task.outputs.task }}';
          const branch = '${{ steps.parse-task.outputs.branch }}';
          
          let message;
          if (hasChanges) {
            message = `✅ **Claude Code task completed!**
            
**Task:** ${task}
**Branch:** \`${branch}\`

I've implemented the requested changes and created a pull request. Please review the changes before merging.

*🤖 Powered by Claude MAX subscription*`;
          } else {
            message = `ℹ️ **Claude Code analysis completed**
            
**Task:** ${task}

No changes were needed for this task. The codebase appears to already meet the requirements.

*🤖 Powered by Claude MAX subscription*`;
          }
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: message
          });

  # Fallback job using existing API key (for backward compatibility)
  claude-fallback:
    if: |
      failure() ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.task == 'test-fallback')
    runs-on: ubuntu-latest
    needs: [claude-task]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Simple Task Execution
      run: |
        echo "🔄 Claude MAX tokens not configured - using alternative approach"
        echo "Task: ${{ github.event.inputs.task || 'comment-triggered task' }}"
        
        # Run basic quality checks
        npm run lint || echo "Linting completed with issues"
        npm run typecheck || echo "Type checking completed with issues"
        npm test || echo "Tests completed with issues"
        
        # Create summary
        echo "## 🤖 Claude Code Fallback Results" > claude-summary.md
        echo "" >> claude-summary.md
        echo "Task requested but Claude MAX tokens not properly configured." >> claude-summary.md
        echo "" >> claude-summary.md
        echo "### Setup Required" >> claude-summary.md
        echo "Please follow the setup guide in \`docs/CLAUDE_MAX_SETUP.md\`" >> claude-summary.md
        echo "" >> claude-summary.md
        echo "### Quality Check Results" >> claude-summary.md
        echo "- Linting: $(npm run lint:check &> /dev/null && echo '✅ Passed' || echo '❌ Issues found')" >> claude-summary.md
        echo "- Type checking: $(npm run typecheck &> /dev/null && echo '✅ Passed' || echo '❌ Issues found')" >> claude-summary.md
        echo "- Tests: $(npm test &> /dev/null && echo '✅ Passed' || echo '❌ Issues found')" >> claude-summary.md
        
        cat claude-summary.md
        
    - name: Comment Fallback Result
      if: github.event_name == 'issue_comment'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: `🔄 **Claude Code Setup Required**
            
The Claude MAX integration is not fully configured. Please follow these steps:

1. Extract your Claude MAX authentication tokens
2. Add them as GitHub Secrets:
   - \`ANTHROPIC_ACCESS_TOKEN\`
   - \`ANTHROPIC_REFRESH_TOKEN\`
   - \`ANTHROPIC_EXPIRES_AT\`

📚 **Setup Guide:** \`docs/CLAUDE_MAX_SETUP.md\`

*Once configured, your Claude Code integration will work automatically!*`
          });