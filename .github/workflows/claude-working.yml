name: Claude Code (Working via Cynosure)

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task:
        description: '–ó–∞–¥–∞—á–∞ –¥–ª—è Claude'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-working:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build Cynosure Bridge
        run: npm run build
        
      - name: Start Cynosure Bridge
        run: |
          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Cynosure Bridge –∫–∞–∫ OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å–µ—Ä–≤–µ—Ä..."
          echo "üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º ANTHROPIC_API_KEY –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –ø—Ä—è–º–æ–≥–æ API –¥–æ—Å—Ç—É–ø–∞"
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ —Å API –∫–ª—é—á–æ–º
          PORT=3000 ANTHROPIC_API_KEY="${{ secrets.ANTHROPIC_API_KEY }}" npm start &
          PROXY_PID=$!
          echo "PROXY_PID=$PROXY_PID" >> $GITHUB_ENV
          
          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
          sleep 10
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º health
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "‚úÖ Cynosure Bridge –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000"
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cynosure Bridge"
            exit 1
          fi
          
          # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
          echo "üß™ –ü—Ä–æ–≤–µ—Ä—è–µ–º OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å..."
          curl -s http://localhost:3000/v1/models | jq '.data[0].id' || echo "API –¥–æ—Å—Ç—É–ø–µ–Ω"
          
      - name: Parse Task
        id: task
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TASK="${{ inputs.task }}"
          else
            COMMENT="${{ github.event.comment.body }}"
            TASK=$(echo "$COMMENT" | sed 's/.*@claude //' | head -1)
          fi
          
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "üéØ –ó–∞–¥–∞—á–∞: $TASK"
          
      - name: Execute via Cynosure Bridge
        id: execute
        run: |
          echo "ü§ñ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Cynosure Bridge..."
          
          TASK="${{ steps.task.outputs.task }}"
          
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–∞—à OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π API
          RESPONSE=$(curl -s -X POST http://localhost:3000/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer dummy-key" \
            -d "{
              \"model\": \"gpt-4\",
              \"messages\": [
                {
                  \"role\": \"system\", 
                  \"content\": \"–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –ø—Ä–æ–µ–∫—Ç–æ–º Cynosure Bridge. –û—Ç–≤–µ—á–∞–π —á–µ—Ç–∫–æ, –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ - –ø—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –∫–æ–¥.\"
                },
                {
                  \"role\": \"user\", 
                  \"content\": \"$TASK\"
                }
              ],
              \"max_tokens\": 2000,
              \"temperature\": 0.7
            }" 2>/dev/null || echo '{"error": "API request failed"}')
          
          echo "üìù –û—Ç–≤–µ—Ç API:"
          echo "$RESPONSE" | jq '.' 2>/dev/null || echo "$RESPONSE"
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç Claude
          CLAUDE_RESPONSE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // .error // "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"' 2>/dev/null)
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
          echo "response=$CLAUDE_RESPONSE" >> $GITHUB_OUTPUT
          
          echo ""
          echo "üé§ –û—Ç–≤–µ—Ç Claude:"
          echo "$CLAUDE_RESPONSE"
          
      - name: Post Response as Comment
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const response = '${{ steps.execute.outputs.response }}';
            const task = '${{ steps.task.outputs.task }}';
            
            const comment = `ü§ñ **Claude —á–µ—Ä–µ–∑ Cynosure Bridge**

**–ó–∞–¥–∞—á–∞:** ${task}

**–û—Ç–≤–µ—Ç:**
${response}

---
*üîß Powered by Cynosure Bridge + Claude MAX*  
*‚ö° OpenAI API compatible proxy*  
*üöÄ Running on GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
      - name: Create Summary
        run: |
          echo "## üéâ Claude –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**–ó–∞–¥–∞—á–∞:** ${{ steps.task.outputs.task }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:**" >> $GITHUB_STEP_SUMMARY
          echo "- üîÑ GitHub Actions ‚Üí Cynosure Bridge (port 3000)" >> $GITHUB_STEP_SUMMARY
          echo "- üåâ OpenAI API ‚Üí Claude CLI translation" >> $GITHUB_STEP_SUMMARY
          echo "- üß† Claude MAX subscription" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**–û—Ç–≤–µ—Ç:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.execute.outputs.response }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Cynosure Bridge..."
          if [ ! -z "$PROXY_PID" ]; then
            kill $PROXY_PID 2>/dev/null || true
          fi
          pkill -f "npm start" 2>/dev/null || true
          echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"