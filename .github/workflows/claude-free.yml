name: Claude FREE (No API Key)

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task:
        description: 'Task for AI'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-free:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@ai'))
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Parse Task
        id: task
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TASK="${{ inputs.task }}"
          else
            COMMENT="${{ github.event.comment.body }}"
            TASK=$(echo "$COMMENT" | sed 's/.*@ai //' | head -1)
          fi
          
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "üéØ Task: $TASK"
          
      - name: Try GitHub Models (FREE)
        id: github_models
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "ü§ñ Trying GitHub Models (100% FREE)..."
          
          TASK="${{ steps.task.outputs.task }}"
          
          # Try multiple free models
          MODELS=(
            "openai/gpt-4o-mini"
            "mistral-ai/mistral-small" 
            "meta/llama-3.1-8b-instruct"
          )
          
          RESPONSE=""
          for MODEL in "${MODELS[@]}"; do
            echo "Trying model: $MODEL"
            
            RESPONSE=$(gh models run "$MODEL" \
              "You are a helpful AI assistant. Please answer: $TASK" \
              2>&1 || echo "")
            
            if [ ! -z "$RESPONSE" ] && [ "$RESPONSE" != "" ]; then
              echo "‚úÖ Got response from $MODEL"
              break
            fi
          done
          
          if [ -z "$RESPONSE" ]; then
            RESPONSE="GitHub Models temporarily unavailable. Using fallback..."
            echo "‚ö†Ô∏è GitHub Models not available"
          fi
          
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Try Local Bridge Fallback
        id: local_bridge
        if: steps.github_models.outcome == 'failure'
        continue-on-error: true
        run: |
          echo "üåê Trying local bridge fallback..."
          
          # List of known ngrok URLs (add yours here)
          BRIDGE_URLS=(
            "https://45c0-85-159-229-107.ngrok-free.app"
            "https://your-backup-url.ngrok-free.app"
          )
          
          TASK="${{ steps.task.outputs.task }}"
          RESPONSE=""
          
          for URL in "${BRIDGE_URLS[@]}"; do
            echo "Trying bridge: $URL"
            
            # Test if bridge is alive
            if curl -f "$URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Bridge is responsive"
              
              # Try to get response
              RESPONSE=$(curl -s -X POST "$URL/v1/test" \
                -H "Content-Type: application/json" \
                -d "{\"task\": \"$TASK\"}" \
                2>&1 | jq -r '.message // empty' || echo "")
              
              if [ ! -z "$RESPONSE" ]; then
                RESPONSE="Response via local bridge: $RESPONSE"
                break
              fi
            fi
          done
          
          if [ -z "$RESPONSE" ]; then
            RESPONSE="Local bridge not available"
          fi
          
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Generate Fallback Response
        id: fallback
        if: steps.github_models.outcome == 'failure' && steps.local_bridge.outcome == 'failure'
        run: |
          echo "üìù Generating fallback response..."
          
          TASK="${{ steps.task.outputs.task }}"
          
          # Simple pattern matching for common tasks
          if echo "$TASK" | grep -qi "hello\|hi\|–ø—Ä–∏–≤–µ—Ç"; then
            RESPONSE="üëã Hello! I'm an AI assistant running in fallback mode. How can I help you?"
          elif echo "$TASK" | grep -qi "test\|—Ç–µ—Å—Ç"; then
            RESPONSE="‚úÖ Test successful! The workflow is working correctly."
          elif echo "$TASK" | grep -qi "help\|–ø–æ–º–æ—â—å"; then
            RESPONSE="üìö I can help with: code review, explanations, debugging, and more!"
          else
            RESPONSE="ü§ñ I received your task: '$TASK'. Currently running in fallback mode without AI models."
          fi
          
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Determine Final Response
        id: final
        run: |
          # Priority: GitHub Models > Local Bridge > Fallback
          if [ "${{ steps.github_models.outcome }}" == "success" ] && [ ! -z "${{ steps.github_models.outputs.response }}" ]; then
            RESPONSE="${{ steps.github_models.outputs.response }}"
            SOURCE="GitHub Models (FREE)"
          elif [ "${{ steps.local_bridge.outcome }}" == "success" ] && [ ! -z "${{ steps.local_bridge.outputs.response }}" ]; then
            RESPONSE="${{ steps.local_bridge.outputs.response }}"
            SOURCE="Local Bridge"
          else
            RESPONSE="${{ steps.fallback.outputs.response }}"
            SOURCE="Fallback"
          fi
          
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "source=$SOURCE" >> $GITHUB_OUTPUT
          
      - name: Post Response
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const response = `${{ steps.final.outputs.response }}`;
            const source = `${{ steps.final.outputs.source }}`;
            const task = `${{ steps.task.outputs.task }}`;
            
            const comment = `ü§ñ **AI Assistant (${source})**

**Task:** ${task}

**Response:**
${response}

---
*üÜì 100% Free - No API keys required*  
*üîß Powered by ${source}*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
      - name: Summary
        run: |
          echo "## üéâ Task Completed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source:** ${{ steps.final.outputs.source }}" >> $GITHUB_STEP_SUMMARY
          echo "**Task:** ${{ steps.task.outputs.task }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Response:**" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.final.outputs.response }}" >> $GITHUB_STEP_SUMMARY