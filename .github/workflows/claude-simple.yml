name: Claude via Cynosure Bridge (Simple)

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      task:
        description: '–ó–∞–¥–∞—á–∞ –¥–ª—è Claude'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-simple:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude'))
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install Dependencies
        run: npm ci
        
      - name: Build Cynosure Bridge
        run: npm run build
        
      - name: Start Cynosure Bridge
        run: |
          echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Cynosure Bridge –Ω–∞ –ø–æ—Ä—Ç—É 3000..."
          
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
          PORT=3000 npm start &
          PROXY_PID=$!
          echo "PROXY_PID=$PROXY_PID" >> $GITHUB_ENV
          
          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
          sleep 10
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "‚úÖ Cynosure Bridge –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ"
          else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Cynosure Bridge"
            exit 1
          fi
          
      - name: Test API Compatibility
        run: |
          echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å..."
          
          # –¢–µ—Å—Ç models endpoint
          echo "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"
          curl -s http://localhost:3000/v1/models | jq '.data[].id' || echo "Models endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
          
          # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
          echo "üí¨ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ API:"
          RESPONSE=$(curl -s -X POST http://localhost:3000/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer dummy-key" \
            -d '{
              "model": "gpt-4",
              "messages": [{"role": "user", "content": "–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç"}],
              "max_tokens": 10
            }')
          
          echo "–û—Ç–≤–µ—Ç API:"
          echo "$RESPONSE" | jq '.' || echo "$RESPONSE"
          
      - name: Parse Task from Input or Comment
        id: task
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TASK="${{ inputs.task }}"
          else
            COMMENT="${{ github.event.comment.body }}"
            TASK=$(echo "$COMMENT" | sed 's/.*@claude //' | sed 's/\n.*//')
          fi
          
          echo "task=$TASK" >> $GITHUB_OUTPUT
          echo "üéØ –ó–∞–¥–∞—á–∞: $TASK"
          
      - name: Execute Task via Cynosure Bridge
        id: execute
        run: |
          echo "ü§ñ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ Cynosure Bridge..."
          
          TASK="${{ steps.task.outputs.task }}"
          
          # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —á–µ—Ä–µ–∑ –Ω–∞—à –ø—Ä–æ–∫—Å–∏
          RESPONSE=$(curl -s -X POST http://localhost:3000/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer dummy-key" \
            -d "{
              \"model\": \"gpt-4\",
              \"messages\": [
                {
                  \"role\": \"system\", 
                  \"content\": \"–¢—ã –ø–æ–º–æ—â–Ω–∏–∫-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –ø—Ä–æ–µ–∫—Ç–æ–º Cynosure Bridge. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.\"
                },
                {
                  \"role\": \"user\", 
                  \"content\": \"$TASK\"
                }
              ],
              \"max_tokens\": 1000
            }")
          
          echo "üìù –û—Ç–≤–µ—Ç Claude:"
          echo "$RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null || echo "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞: $RESPONSE"
          
          # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
          CLAUDE_RESPONSE=$(echo "$RESPONSE" | jq -r '.choices[0].message.content' 2>/dev/null || echo "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç Claude")
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$CLAUDE_RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Comment Response
        if: github.event_name == 'issue_comment'
        uses: actions/github-script@v7
        with:
          script: |
            const response = `${{ steps.execute.outputs.response }}`;
            const task = `${{ steps.task.outputs.task }}`;
            
            const comment = `ü§ñ **Claude —á–µ—Ä–µ–∑ Cynosure Bridge**
            
**–ó–∞–¥–∞—á–∞:** ${task}

**–û—Ç–≤–µ—Ç:**
${response}

---
*üîß Powered by Cynosure Bridge + Claude MAX*
*‚ö° –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞ GitHub Actions*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
            
      - name: Create Summary
        run: |
          echo "## üéâ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**–ó–∞–¥–∞—á–∞:** ${{ steps.task.outputs.task }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**–°—Ç–∞—Ç—É—Å:** ‚úÖ –£—Å–ø–µ—à–Ω–æ" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cynosure Bridge:** –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 3000" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Claude MAX:** –ü–æ–¥–∫–ª—é—á–µ–Ω —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É" >> $GITHUB_STEP_SUMMARY
          
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤..."
          if [ ! -z "$PROXY_PID" ]; then
            kill $PROXY_PID 2>/dev/null || true
          fi
          pkill -f "npm start" 2>/dev/null || true
          echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"