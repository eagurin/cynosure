#!/bin/bash

# üè≠ Cynosure Factory Simple - –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –±–µ–∑ —Ç—É–Ω–Ω–µ–ª–µ–π
# –£–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è self-hosted runner –∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

set -e

# üéõÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
FACTORY_VERSION="2.0.0"
FACTORY_NAME="Cynosure Factory Simple"

# üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"
FACTORY_DIR="$PROJECT_DIR/.factory"
RUNTIME_DIR="$FACTORY_DIR/runtime"
LOGS_DIR="$FACTORY_DIR/logs"

# –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
mkdir -p "$RUNTIME_DIR" "$LOGS_DIR"

# üìã –§–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è
PID_FILE="$RUNTIME_DIR/cynosure.pid"
STATUS_FILE="$RUNTIME_DIR/status.json"
LOG_FILE="$LOGS_DIR/factory.log"

# üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
PORT="${PORT:-3000}"
NODE_ENV="${NODE_ENV:-production}"
HEALTH_URL="http://localhost:$PORT/health"

# üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
factory_log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
}

# üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
update_status() {
    local service_status="$1"
    local message="$2"
    
    cat > "$STATUS_FILE" << EOF
{
  "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "factory_version": "$FACTORY_VERSION",
  "service_status": "$service_status",
  "port": $PORT,
  "health_url": "$HEALTH_URL",
  "message": "$message",
  "pid": $(cat "$PID_FILE" 2>/dev/null || echo "null"),
  "uptime_seconds": $(get_uptime)
}
EOF
}

# ‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
get_uptime() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            local start_time=$(ps -o lstart= -p "$pid" 2>/dev/null | xargs -I {} date -j -f "%a %b %d %H:%M:%S %Y" "{}" "+%s" 2>/dev/null || echo "0")
            local current_time=$(date +%s)
            echo $((current_time - start_time))
        else
            echo "0"
        fi
    else
        echo "0"
    fi
}

# üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    factory_log "INFO" "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    
    # Node.js
    if ! command -v node &> /dev/null; then
        factory_log "ERROR" "‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # npm
    if ! command -v npm &> /dev/null; then
        factory_log "ERROR" "‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω"
        return 1
    fi
    
    # package.json
    if [ ! -f "$PROJECT_DIR/package.json" ]; then
        factory_log "ERROR" "‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ $PROJECT_DIR"
        return 1
    fi
    
    # –°–æ–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    if [ ! -d "$PROJECT_DIR/dist" ]; then
        factory_log "WARN" "‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç –Ω–µ —Å–æ–±—Ä–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É..."
        cd "$PROJECT_DIR"
        npm run build
    fi
    
    factory_log "INFO" "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
    return 0
}

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
start_service() {
    factory_log "INFO" "üöÄ –ó–∞–ø—É—Å–∫ Cynosure Bridge..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        local existing_pid=$(lsof -ti:$PORT)
        factory_log "WARN" "‚ö†Ô∏è –ü–æ—Ä—Ç $PORT –∑–∞–Ω—è—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º $existing_pid"
        
        # –£–±–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
        kill $existing_pid 2>/dev/null || true
        sleep 2
        factory_log "INFO" "üîÑ –û—Å–≤–æ–±–æ–¥–∏–ª–∏ –ø–æ—Ä—Ç $PORT"
    fi
    
    cd "$PROJECT_DIR"
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
    NODE_ENV=$NODE_ENV PORT=$PORT nohup npm start > "$LOGS_DIR/cynosure.log" 2>&1 &
    local service_pid=$!
    echo $service_pid > "$PID_FILE"
    
    factory_log "INFO" "üéØ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω —Å PID: $service_pid"
    
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
    local retries=0
    local max_retries=10
    
    while [ $retries -lt $max_retries ]; do
        sleep 2
        if curl -f "$HEALTH_URL" >/dev/null 2>&1; then
            factory_log "INFO" "‚úÖ –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç"
            update_status "running" "Service started successfully"
            return 0
        fi
        retries=$((retries + 1))
        factory_log "INFO" "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞... ($retries/$max_retries)"
    done
    
    factory_log "ERROR" "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ $(($max_retries * 2)) —Å–µ–∫—É–Ω–¥"
    update_status "failed" "Service failed to start"
    return 1
}

# üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
stop_service() {
    factory_log "INFO" "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Cynosure Bridge..."
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            factory_log "INFO" "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å $pid –∑–∞–≤–µ—Ä—à—ë–Ω"
        else
            factory_log "WARN" "‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å $pid —É–∂–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
        rm "$PID_FILE"
    else
        factory_log "WARN" "‚ö†Ô∏è PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    local port_pids=$(lsof -ti:$PORT 2>/dev/null || true)
    if [ -n "$port_pids" ]; then
        echo "$port_pids" | xargs kill 2>/dev/null || true
        factory_log "INFO" "üßπ –û—á–∏—â–µ–Ω –ø–æ—Ä—Ç $PORT"
    fi
    
    update_status "stopped" "Service stopped"
    factory_log "INFO" "‚úÖ –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞
restart_service() {
    factory_log "INFO" "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Cynosure Bridge..."
    stop_service
    sleep 3
    start_service
}

# üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
show_status() {
    clear
    echo "üè≠ =========================================="
    echo "   $FACTORY_NAME v$FACTORY_VERSION"
    echo "=========================================="
    echo ""
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    echo "üìç –ü—Ä–æ–µ–∫—Ç: $PROJECT_DIR"
    echo "üåê –ü–æ—Ä—Ç: $PORT"
    echo "üîó Health: $HEALTH_URL"
    echo ""
    
    # PID –∏ –ø—Ä–æ—Ü–µ—Å—Å
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            echo "üü¢ –°—Ç–∞—Ç—É—Å: –†–ê–ë–û–¢–ê–ï–¢"
            echo "üìã PID: $pid"
            echo "‚è±Ô∏è Uptime: $(get_uptime) —Å–µ–∫—É–Ω–¥"
        else
            echo "üî¥ –°—Ç–∞—Ç—É—Å: –ù–ï –†–ê–ë–û–¢–ê–ï–¢ (PID —É—Å—Ç–∞—Ä–µ–ª)"
            rm "$PID_FILE"
        fi
    else
        echo "üî¥ –°—Ç–∞—Ç—É—Å: –ù–ï –ó–ê–ü–£–©–ï–ù"
    fi
    
    # Health check
    if curl -f "$HEALTH_URL" >/dev/null 2>&1; then
        echo "‚úÖ Health Check: OK"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
        local health_data=$(curl -s "$HEALTH_URL" 2>/dev/null)
        if [ -n "$health_data" ]; then
            echo "üìä –í–µ—Ä—Å–∏—è: $(echo "$health_data" | jq -r '.version // "unknown"')"
            echo "‚ö° Uptime: $(echo "$health_data" | jq -r '.uptime // "unknown"') —Å–µ–∫—É–Ω–¥"
            echo "üíæ Memory: $(echo "$health_data" | jq -r '.memory.heapUsed // "unknown"') bytes"
        fi
    else
        echo "‚ùå Health Check: FAIL"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "üåê –ü–æ—Ä—Ç $PORT: –°–õ–£–®–ê–ï–¢"
        echo "üì° Network: http://$(hostname -I | awk '{print $1}'):$PORT (–≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø)"
    else
        echo "üî¥ –ü–æ—Ä—Ç $PORT: –ù–ï –°–õ–£–®–ê–ï–¢"
    fi
    
    echo ""
    echo "üéØ –ö–æ–º–∞–Ω–¥—ã:"
    echo "   start      - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "   stop       - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "   restart    - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
    echo "   logs       - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "   monitor    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
    echo "   test       - –¢–µ—Å—Ç API"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    if [ -f "$LOG_FILE" ]; then
        echo ""
        echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
        tail -5 "$LOG_FILE" | while read line; do
            echo "   $line"
        done
    fi
}

# üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    echo "üìã –õ–æ–≥–∏ Cynosure Factory:"
    echo "========================="
    
    if [ -f "$LOG_FILE" ]; then
        tail -30 "$LOG_FILE"
    else
        echo "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
    
    echo ""
    echo "üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞:"
    echo "================"
    
    if [ -f "$LOGS_DIR/cynosure.log" ]; then
        tail -20 "$LOGS_DIR/cynosure.log"
    else
        echo "–õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
}

# üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitor_service() {
    echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Cynosure Bridge (Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞)"
    echo "================================================="
    
    while true; do
        clear
        show_status
        echo ""
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."
        sleep 5
    done
}

# üß™ –¢–µ—Å—Ç API
test_api() {
    factory_log "INFO" "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API..."
    
    # Health check
    if curl -f "$HEALTH_URL" >/dev/null 2>&1; then
        factory_log "INFO" "‚úÖ Health check: OK"
    else
        factory_log "ERROR" "‚ùå Health check: FAIL"
        return 1
    fi
    
    # –¢–µ—Å—Ç Claude API
    factory_log "INFO" "ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude API..."
    
    local test_response=$(curl -s -X POST "http://localhost:$PORT/v1/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer test" \
        -d '{
            "model": "gpt-4",
            "messages": [{"role": "user", "content": "–°–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ —á—Ç–æ —Ç—ã Claude"}],
            "max_tokens": 50
        }' 2>&1)
    
    if echo "$test_response" | jq . >/dev/null 2>&1; then
        local claude_message=$(echo "$test_response" | jq -r '.choices[0].message.content // "error"')
        factory_log "INFO" "‚úÖ Claude API: $claude_message"
        return 0
    else
        factory_log "ERROR" "‚ùå Claude API: $test_response"
        return 1
    fi
}

# üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_factory() {
    factory_log "INFO" "üè≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–±—Ä–∏–∫–∏..."
    
    # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    cat > "$RUNTIME_DIR/config.json" << EOF
{
  "factory_name": "$FACTORY_NAME",
  "factory_version": "$FACTORY_VERSION",
  "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "mode": "local",
  "tunnels_enabled": false,
  "port": $PORT,
  "health_url": "$HEALTH_URL"
}
EOF
    
    update_status "initialized" "Factory initialized"
    factory_log "INFO" "‚úÖ –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"
}

# üîß –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-status}" in
        init)
            init_factory
            ;;
        start)
            if ! check_dependencies; then
                exit 1
            fi
            start_service
            ;;
        stop)
            stop_service
            ;;
        restart)
            if ! check_dependencies; then
                exit 1
            fi
            restart_service
            ;;
        status)
            show_status
            ;;
        logs)
            show_logs
            ;;
        monitor)
            monitor_service
            ;;
        test)
            test_api
            ;;
        *)
            echo "üè≠ Cynosure Factory Simple v$FACTORY_VERSION"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {init|start|stop|restart|status|logs|monitor|test}"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  init      - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–±—Ä–∏–∫–∏"
            echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å Cynosure Bridge"
            echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
            echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å"
            echo "  status    - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞"
            echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
            echo "  monitor   - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
            echo "  test      - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API"
            echo ""
            echo "üè† –ü—Ä–æ—Å—Ç–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –±–µ–∑ —Ç—É–Ω–Ω–µ–ª–µ–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
            echo "üöÄ –î–ª—è self-hosted GitHub Actions runner"
            echo "üåê –°–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø: http://$(hostname -I | awk '{print $1}'):$PORT"
            exit 1
            ;;
    esac
}

main "$@"