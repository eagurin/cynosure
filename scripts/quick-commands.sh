#!/bin/bash

# üéØ CYNOSURE QUICK COMMANDS
# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"

# üé® –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_header() { echo -e "${PURPLE}üéØ $1${NC}"; }

# üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
quick_start() {
    log_header "–ë–´–°–¢–†–´–ô –°–¢–ê–†–¢ CYNOSURE"
    echo ""
    
    cd "$PROJECT_DIR"
    
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."
    ./scripts/cynosure-local.sh stop >/dev/null 2>&1 || true
    
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
    if ./scripts/cynosure-local.sh start; then
        log_success "–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!"
        echo ""
        echo "üåê –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å–∞–º:"
        echo "   ‚Ä¢ http://localhost:3000"
        echo "   ‚Ä¢ http://192.168.1.196:3000"
        echo ""
        echo "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º API..."
        sleep 2
        ./scripts/cynosure-local.sh test
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        return 1
    fi
}

# üîÑ –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
quick_restart() {
    log_header "–ë–´–°–¢–†–´–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö"
    echo ""
    
    cd "$PROJECT_DIR"
    
    log_info "–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç..."
    npm run build
    
    log_info "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
    ./scripts/cynosure-local.sh restart
    
    log_success "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# üß™ –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
quick_test() {
    log_header "–ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï"
    echo ""
    
    cd "$PROJECT_DIR"
    
    # Health check
    log_info "Health check..."
    if curl -f http://localhost:3000/health >/dev/null 2>&1; then
        log_success "Health OK"
    else
        log_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        return 1
    fi
    
    # Models
    log_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª–∏..."
    MODELS_COUNT=$(curl -s http://localhost:3000/v1/models | jq '.data | length' 2>/dev/null || echo "0")
    if [ "$MODELS_COUNT" -gt 0 ]; then
        log_success "–î–æ—Å—Ç—É–ø–Ω–æ $MODELS_COUNT –º–æ–¥–µ–ª–µ–π"
    else
        log_warning "–ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã"
    fi
    
    # Chat API
    log_info "–¢–µ—Å—Ç–∏—Ä—É–µ–º Chat API..."
    CHAT_RESPONSE=$(curl -s -X POST http://localhost:3000/v1/chat/completions \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer test" \
        -d '{"model": "gpt-4", "messages": [{"role": "user", "content": "test"}]}' 2>/dev/null)
    
    if echo "$CHAT_RESPONSE" | jq '.choices[0].message.content' >/dev/null 2>&1; then
        log_success "Chat API —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "Chat API –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
    fi
    
    # Embeddings
    log_info "–¢–µ—Å—Ç–∏—Ä—É–µ–º Embeddings..."
    EMB_RESPONSE=$(curl -s -X POST http://localhost:3000/v1/embeddings \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer test" \
        -d '{"model": "text-embedding-3-small", "input": "test"}' 2>/dev/null)
    
    if echo "$EMB_RESPONSE" | jq '.data[0].embedding | length' >/dev/null 2>&1; then
        DIMENSIONS=$(echo "$EMB_RESPONSE" | jq '.data[0].embedding | length' 2>/dev/null)
        log_success "Embeddings —Ä–∞–±–æ—Ç–∞—é—Ç ($DIMENSIONS dimensions)"
    else
        log_warning "Embeddings –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"
    fi
    
    log_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# üìä –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å
quick_status() {
    log_header "–°–¢–ê–¢–£–° CYNOSURE"
    echo ""
    
    cd "$PROJECT_DIR"
    
    # –ü—Ä–æ—Ü–µ—Å—Å
    if ./scripts/cynosure-local.sh status | grep -q "–†–ê–ë–û–¢–ê–ï–¢"; then
        log_success "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"
    else
        log_warning "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
    
    # –ü–æ—Ä—Ç
    if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null 2>&1; then
        log_success "–ü–æ—Ä—Ç 3000 –∑–∞–Ω—è—Ç"
    else
        log_warning "–ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
    
    # Health
    if curl -f http://localhost:3000/health >/dev/null 2>&1; then
        HEALTH=$(curl -s http://localhost:3000/health 2>/dev/null)
        UPTIME=$(echo "$HEALTH" | jq -r '.uptime // "unknown"' 2>/dev/null)
        MEMORY=$(echo "$HEALTH" | jq -r '.memory.heapUsed // "unknown"' 2>/dev/null)
        
        log_success "Health OK (uptime: ${UPTIME}s, memory: $MEMORY bytes)"
    else
        log_warning "Health endpoint –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
    fi
    
    # –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫)
    if [ -f "$PROJECT_DIR/.local/cynosure.log" ]; then
        echo ""
        log_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:"
        echo "$(tail -5 "$PROJECT_DIR/.local/cynosure.log")"
    fi
}

# üßπ –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞
quick_clean() {
    log_header "–ë–´–°–¢–†–ê–Ø –û–ß–ò–°–¢–ö–ê"
    echo ""
    
    cd "$PROJECT_DIR"
    
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
    ./scripts/cynosure-local.sh stop >/dev/null 2>&1 || true
    
    log_info "–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã..."
    npm run clean
    
    log_info "–û—á–∏—â–∞–µ–º –ª–æ–≥–∏..."
    rm -f .local/cynosure.log
    
    log_info "–£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 3000..."
    lsof -ti:3000 | xargs kill -9 2>/dev/null || true
    
    log_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

# üîß –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–º–æ–Ω—Ç
quick_fix() {
    log_header "–ë–´–°–¢–†–´–ô –†–ï–ú–û–ù–¢"
    echo ""
    
    cd "$PROJECT_DIR"
    
    log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã..."
    ./scripts/cynosure-local.sh stop >/dev/null 2>&1 || true
    lsof -ti:3000 | xargs kill -9 2>/dev/null || true
    
    log_info "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
    rm -rf node_modules package-lock.json
    npm install
    
    log_info "–ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç..."
    npm run build
    
    log_info "–ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
    ./scripts/cynosure-local.sh start
    
    log_success "–†–µ–º–æ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!"
}

# üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
quick_benchmark() {
    log_header "–ë–´–°–¢–†–´–ô –ë–ï–ù–ß–ú–ê–†–ö"
    echo ""
    
    cd "$PROJECT_DIR"
    
    if ! curl -f http://localhost:3000/health >/dev/null 2>&1; then
        log_error "–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: quick start"
        return 1
    fi
    
    log_info "–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å..."
    
    # 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ chat API
    START_TIME=$(date +%s.%N)
    for i in {1..10}; do
        curl -s -X POST http://localhost:3000/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer test" \
            -d '{"model": "gpt-4", "messages": [{"role": "user", "content": "Hi"}]}' \
            >/dev/null 2>&1
    done
    END_TIME=$(date +%s.%N)
    
    DURATION=$(echo "$END_TIME - $START_TIME" | bc -l 2>/dev/null || echo "unknown")
    AVG_TIME=$(echo "scale=3; $DURATION / 10" | bc -l 2>/dev/null || echo "unknown")
    
    log_success "10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ ${DURATION}s (—Å—Ä–µ–¥–Ω–µ–µ: ${AVG_TIME}s –Ω–∞ –∑–∞–ø—Ä–æ—Å)"
}

# üéØ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-help}" in
        start|s)
            quick_start
            ;;
        restart|r)
            quick_restart
            ;;
        test|t)
            quick_test
            ;;
        status|st)
            quick_status
            ;;
        clean|c)
            quick_clean
            ;;
        fix|f)
            quick_fix
            ;;
        benchmark|b)
            quick_benchmark
            ;;
        help|h|*)
            echo "üéØ CYNOSURE QUICK COMMANDS"
            echo "=========================="
            echo ""
            echo "–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
            echo "  start, s      - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞"
            echo "  restart, r    - –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º"
            echo "  test, t       - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö endpoints"
            echo "  status, st    - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
            echo "  clean, c      - –ë—ã—Å—Ç—Ä–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
            echo "  fix, f        - –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–º–æ–Ω—Ç (–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ + —Å–±–æ—Ä–∫–∞)"
            echo "  benchmark, b  - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
            echo "  help, h       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é"
            echo ""
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  ./scripts/quick-commands.sh start"
            echo "  ./scripts/quick-commands.sh test"
            echo "  ./scripts/quick-commands.sh status"
            echo ""
            ;;
    esac
}

main "$@"