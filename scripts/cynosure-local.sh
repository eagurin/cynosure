#!/bin/bash

# üè† Cynosure Local - –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç—É–Ω–Ω–µ–ª–µ–π
# –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ –¥–ª—è self-hosted GitHub Actions

set -e

# üéõÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOCAL_VERSION="1.0.0"
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
LOCAL_DIR="$PROJECT_DIR/.local"
PID_FILE="$LOCAL_DIR/cynosure.pid"
LOG_FILE="$LOCAL_DIR/cynosure.log"
PORT="${PORT:-3000}"

# –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
mkdir -p "$LOCAL_DIR"

# üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
start_local() {
    log "üöÄ –ó–∞–ø—É—Å–∫ Cynosure Bridge..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        log "‚ö†Ô∏è  –ü–æ—Ä—Ç $PORT —É–∂–µ –∑–∞–Ω—è—Ç"
        local existing_pid=$(lsof -ti:$PORT)
        if [ -n "$existing_pid" ]; then
            log "üîÑ –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å ($existing_pid)"
            kill $existing_pid 2>/dev/null || true
            sleep 2
        fi
    fi
    
    cd "$PROJECT_DIR"
    
    # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    log "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    npm run build
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–µ
    log "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É $PORT..."
    PORT=$PORT nohup npm start > "$LOG_FILE" 2>&1 &
    local server_pid=$!
    echo $server_pid > "$PID_FILE"
    
    # –ñ–¥—ë–º –∑–∞–ø—É—Å–∫–∞
    sleep 3
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
    if curl -f "http://localhost:$PORT/health" >/dev/null 2>&1; then
        log "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω"
        log "üåê URL: http://localhost:$PORT"
        log "üìä Health: http://localhost:$PORT/health"
        log "üîó API: http://localhost:$PORT/v1/chat/completions"
        log "üìã PID: $server_pid"
        return 0
    else
        log "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        return 1
    fi
}

# üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
stop_local() {
    log "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Cynosure Bridge..."
    
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            kill "$pid"
            log "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å $pid –∑–∞–≤–µ—Ä—à—ë–Ω"
        else
            log "‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å $pid —É–∂–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
        rm "$PID_FILE"
    else
        log "‚ö†Ô∏è  PID —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    local port_pids=$(lsof -ti:$PORT 2>/dev/null || true)
    if [ -n "$port_pids" ]; then
        echo "$port_pids" | xargs kill 2>/dev/null || true
        log "üßπ –û—á–∏—â–µ–Ω –ø–æ—Ä—Ç $PORT"
    fi
    
    log "‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
restart_local() {
    log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Cynosure Bridge..."
    stop_local
    sleep 2
    start_local
}

# üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
status_local() {
    echo "üè† =========================================="
    echo "   Cynosure Local v$LOCAL_VERSION"
    echo "=========================================="
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PID —Ñ–∞–π–ª
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if kill -0 "$pid" 2>/dev/null; then
            echo "üìã PID: $pid (–∑–∞–ø—É—â–µ–Ω)"
        else
            echo "üìã PID: $pid (–Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç)"
            rm "$PID_FILE"
        fi
    else
        echo "üìã PID: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç
    if lsof -Pi :$PORT -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "üåê –ü–æ—Ä—Ç $PORT: –∑–∞–Ω—è—Ç"
    else
        echo "üåê –ü–æ—Ä—Ç $PORT: —Å–≤–æ–±–æ–¥–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
    if curl -f "http://localhost:$PORT/health" >/dev/null 2>&1; then
        echo "üü¢ –°—Ç–∞—Ç—É—Å: –†–ê–ë–û–¢–ê–ï–¢"
        echo "üîó URL: http://localhost:$PORT"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–¥–æ—Ä–æ–≤—å–µ
        local health=$(curl -s "http://localhost:$PORT/health" 2>/dev/null)
        if [ -n "$health" ]; then
            echo "üìä Uptime: $(echo "$health" | jq -r '.uptime // "unknown"' 2>/dev/null || echo "unknown")"
            echo "üíæ Memory: $(echo "$health" | jq -r '.memory.heapUsed // "unknown"' 2>/dev/null || echo "unknown") bytes"
        fi
    else
        echo "üî¥ –°—Ç–∞—Ç—É—Å: –ù–ï –û–¢–í–ï–ß–ê–ï–¢"
    fi
    
    echo ""
    echo "üéØ –ö–æ–º–∞–Ω–¥—ã:"
    echo "   start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
    echo "   stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"  
    echo "   restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
    echo "   logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "   test     - –¢–µ—Å—Ç API"
}

# üìã –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:"
        echo "================================"
        tail -20 "$LOG_FILE"
    else
        echo "üìã –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $LOG_FILE"
    fi
}

# üß™ –¢–µ—Å—Ç API
test_api() {
    log "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API..."
    
    if ! curl -f "http://localhost:$PORT/health" >/dev/null 2>&1; then
        log "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ health check"
        return 1
    fi
    
    log "‚úÖ Health check: OK"
    
    # –¢–µ—Å—Ç Claude API
    log "ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Claude API..."
    
    local response=$(curl -s -X POST "http://localhost:$PORT/v1/chat/completions" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer test" \
        -d '{
            "model": "gpt-4",
            "messages": [
                {
                    "role": "user",
                    "content": "–°–∫–∞–∂–∏ \"—Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω\" –µ—Å–ª–∏ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—á–∞—Ç—å"
                }
            ],
            "max_tokens": 20
        }' 2>&1)
    
    if echo "$response" | jq . >/dev/null 2>&1; then
        local claude_message=$(echo "$response" | jq -r '.choices[0].message.content // "error"')
        log "‚úÖ Claude API: $claude_message"
        return 0
    else
        log "‚ùå Claude API –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç"
        log "–û—Ç–≤–µ—Ç: $response"
        return 1
    fi
}

# üîß –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-status}" in
        start)
            start_local
            ;;
        stop)
            stop_local
            ;;
        restart)
            restart_local
            ;;
        status)
            status_local
            ;;
        logs)
            show_logs
            ;;
        test)
            test_api
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {start|stop|restart|status|logs|test}"
            echo ""
            echo "üè† Cynosure Local - –ª–æ–∫–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç—É–Ω–Ω–µ–ª–µ–π"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  start    - –ó–∞–ø—É—Å—Ç–∏—Ç—å Cynosure Bridge –Ω–∞ localhost:$PORT"
            echo "  stop     - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
            echo "  restart  - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"
            echo "  status   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"
            echo "  logs     - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞"
            echo "  test     - –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API"
            exit 1
            ;;
    esac
}

main "$@"